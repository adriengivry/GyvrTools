/**
* Project GyvrTools
* @author Adrien Givry
* @version 1.0
*/

#pragma once
#ifndef _GYVRTOOLS_ERRORHANDLER_H
#define _GYVRTOOLS_ERRORHANDLER_H

#include <string>

#include "GyvrTools/API/Export.h"
#include "GyvrTools/System/Debug.h"
#include "GyvrTools/Utils/Event.h"

namespace GyvrTools::System
{
	/**
	* Handle error by storing the last error in a string and making it available to retrieve
	*/
	class ErrorHandler final
	{
	public:
		/* Desactivate the constructor (Un-instanciable static class) */
		ErrorHandler() = delete;

		/**
		* Return the last error generated by GyvrTools
		*/
		static API_GYVRTOOLS const std::string&	GetLastError();

		/**
		* Log the last error generated by GyvrTools
		*/
		static API_GYVRTOOLS void LogLastError();

		/**
		* Clear the last error generated by GyvrTools
		*/
		static API_GYVRTOOLS void ClearLastError();

		/**
		* Check if there is a last error
		*/
		static API_GYVRTOOLS bool HasLastError();

		/**
		* Register an error (Internal method, can't be called by the library user)
		* @param p_error
		*/
		static void	RegisterError(const std::string& p_error);

	private:
		static std::string __LAST_ERROR;
	};
}

#endif // _GYVRTOOLS_ERRORHANDLER_H